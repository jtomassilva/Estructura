#include <iostream>
#include <set>
#include <vector>
#include <numeric>
#include <typeinfo>


using namespace std;

int te, bk, fw, cs, timer;
int T[100], h[100];
set<pair<int, int>> fin;
vector<int> stk, grafo[100];
void dfs(int);

int main()
{
	int n, minimo, maximo, sum;
	cin >> te >> bk >> fw >> cs;
	n = te + 1;

	if(bk > fw) minimo = bk + te;

	else minimo = fw + te;

	maximo = n * (n - 1) / 2 - cs;
	sum = te;

	for (int i = 1; i < n; ++i)
	{
		if (sum + i - 1 <= minimo)
		{
			grafo[i - 1].push_back(i);
			sum += i - 1;
		}
		else
		{
			grafo[minimo - sum].push_back(i);
			sum += minimo - sum;
		}
	}

	dfs(0);
	cout << n << '\n';

	for (int i = 0; i < int(n); ++i)
	{
		cout << (grafo[i]).size();
	for (int v: grafo[i]) cout << ' ' << v+1;
	cout << endl;
	}

	return 0;
}

void dfs(int u)
{
	T[u] = timer++;
	stk.push_back(u);

	for (int v: grafo[u])
	{
		h[v] = h[u] + 1;
		dfs(v);
	}

	stk.pop_back();

	for (int v: stk)
	{
		if (bk <= 0) break;
		grafo[u].push_back(v);
		--bk;
	}

	for (pair<int, int> m: fin)
	{
		
		if (cs <= 0) break;
		if (m.first >= T[u]) break;
		int v = m.second;
		grafo[u].push_back(v);
		--cs;
	}

	for (auto it = fin.rbegin(); it != fin.rend(); ++it)
		{
		if (fw <= 0) break;
		if (it->first <= T[u]) break;
		int v = it->second;
		if (h[v] == h[u] + 1) continue;
		grafo[u].push_back(v);
		--fw;
	}

	fin.emplace(T[u], u);
}